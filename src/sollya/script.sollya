// this script generates aerobus polynomial for given FUNC, on given INTERVAL, with integers having BITS bits

INTERVAL = [-1, 1]; // INTERVAL to approximate FUNC on
FUNC = expm1(x); // any expression supported by sollya
BITS = 32; // supported values : 16, 32, 64
MANTISSA = 24;



FP_EPS = 488e-6; // for half precision
MIN_INT = -32768;
MAX_INT = 32767; 

if(BITS == 16) then {
    print("running for 16 bits");
    MIN_INT = -32768;
    MAX_INT = 32767;
    RATIONAL = "q16";
    FP_EPS = 488e-6;
    MANTISSA = 11;
};

if(BITS == 32) then {
    print("running for 32 bits");
    MIN_INT = -2147483648;
    MAX_INT = 2147483647;
    RATIONAL = "q32";
    FP_EPS = 596e-10;
    MANTISSA = 24;
};

if(BITS == 64) then {
    print("running for 64 bits");
    MIN_INT = -9223372036854775808;
    MAX_INT = 9223372036854775807;
    RATIONAL = "q64";
    FP_EPS = 111e-18;
    MANTISSA = 53;
};

if(BITS != 16 && BITS != 32 && BITS != 64) then {
    print("UNSUPPORTED ARGUMENT BITS MUST BE 16, 32, or 64");
    quit;
};

deg = guessdegree(FUNC, INTERVAL, FP_EPS);
d = sup(deg);

if (d > 128) then {
    print("no polynomial found");
    quit;
} else {
    print("degree of polynomial approximation for", FUNC, " : ", d);
};

// fpminimax looks less stable than pure remez, to investigate
P = remez(FUNC, d, INTERVAL);

P;

prec = MANTISSA;
infnorm1 = dirtyinfnorm(P-FUNC, INTERVAL);
print("error on INTERVAL: ", infnorm1);
prec = 165;


write("using P = aerobus::polynomial<aerobus::", RATIONAL, ">::template val<");

// find a rational approximation of ccc with numerator and denomirator fitting in int16, int32 or int64
find_rational = proc(ccc) {
    bits = 2;
    nn = 0;
    dd = 1;
    rrr = rationalapprox(ccc, bits);
    rr := rrr;
    for ii from 2 to 128 do {
        bits = bits + 1;
        rrr = rationalapprox(ccc, bits);
        nn = numerator(rrr);
        dd = denominator(rrr);
        if(nn < MAX_INT && nn >= MIN_INT && dd < MAX_INT && dd >= MIN_INT) then {
            rr = rrr;
        };
    };

    return rr;
};

// BUILD P2 (rational coeffs)
P2 = 0;
for i from 0 to d do { 
    coefficient = coeff(P, i);
    c = find_rational(coefficient);
    P2 = P2 + c * x^i;
};

// PRINT FOR AEROBUS (reversed order)
for i from d to 0 by -1 do {
    coefficient = coeff(P, i);
    c = find_rational(coefficient);
    nn = numerator(c);
    dd = denominator(c);
    write("aerobus::make_", RATIONAL, "_t<", nn, ", ", dd,">");
    if(i > 0) then {
        write(", ");
    };
};

print(">;");

prec = MANTISSA;
infnorm2 = dirtyinfnorm(P2 - FUNC, INTERVAL);
print("error with rationals: ", infnorm2);
prec = 165;